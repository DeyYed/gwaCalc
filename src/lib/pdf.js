import { numberOr } from '../utils/numbers'
import { SCHOOLS } from '../constants'

async function loadImageDataURL(src) {
  try {
    const res = await fetch(src)
    if (!res.ok) return null
    const blob = await res.blob()
    return await new Promise((resolve) => {
      const fr = new FileReader()
      fr.onload = () => resolve(fr.result)
      fr.readAsDataURL(blob)
    })
  } catch {
    return null
  }
}

export async function generatePDF({ rows, name, school, totalUnits, gwa }) {
  const { jsPDF } = await import('jspdf')
  const doc = new jsPDF({ unit: 'pt' })

  const marginX = 48, marginY = 48
  let y = marginY

  const pageW = doc.internal.pageSize.getWidth()
  const pageH = doc.internal.pageSize.getHeight()
  const css = getComputedStyle(document.documentElement)
  const c1 = css.getPropertyValue('--c1').trim() || '#6366f1'
  const c2 = css.getPropertyValue('--c2').trim() || '#a855f7'
  const c3 = css.getPropertyValue('--c3').trim() || '#06b6d4'
  const hexToRgb = (hex) => {
    const h = hex.replace('#','')
    const bigint = parseInt(h.length===3 ? h.split('').map(x=>x+x).join('') : h, 16)
    return { r: (bigint>>16)&255, g: (bigint>>8)&255, b: bigint&255 }
  }
  const c1rgb = hexToRgb(c1), c2rgb = hexToRgb(c2), c3rgb = hexToRgb(c3)
  if (doc.GState) { const gs = new doc.GState({ opacity: 0.15 }); doc.setGState(gs) }
  doc.setFillColor(c1rgb.r, c1rgb.g, c1rgb.b)
  doc.circle(pageW * 0.15, pageH * 0.20, pageW * 0.20, 'F')
  doc.setFillColor(c2rgb.r, c2rgb.g, c2rgb.b)
  doc.circle(pageW * 0.80, pageH * 0.18, pageW * 0.16, 'F')
  doc.setFillColor(c3rgb.r, c3rgb.g, c3rgb.b)
  doc.circle(pageW * 0.55, pageH * 0.66, pageW * 0.24, 'F')
  if (doc.GState) { const gs = new doc.GState({ opacity: 1 }); doc.setGState(gs) }

  const logoSrc = school === 'psu' ? '/PampangaStateU.png' : (school === 'hau' ? '/HolyAngelU.png' : '/GWA-logo.png')
  const logoData = await loadImageDataURL(logoSrc)
  doc.setFillColor(17, 24, 39)
  doc.rect(0, 0, pageW, 64, 'F')
  if (logoData) { try { doc.addImage(logoData, 'PNG', marginX, 16, 32, 32) } catch {} }
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(248, 250, 252)
  doc.setFontSize(16)
  doc.text('GWA Report', marginX + (logoData ? 44 : 0), 38)
  doc.setFont('helvetica', 'normal')
  doc.setTextColor(203, 213, 225)
  doc.setFontSize(10)
  doc.text(new Date().toLocaleString(), marginX + (logoData ? 44 : 0), 52)
  y = 88

  const schoolLabel = (SCHOOLS.find(s => s.id === school)?.label) || ''
  doc.setFontSize(11)
  doc.setTextColor(203, 213, 225)
  const subtitle = [name && `Name: ${name}`, schoolLabel && `School: ${schoolLabel}`].filter(Boolean).join('  •  ')
  if (subtitle) { doc.text(subtitle, marginX, y); y += 14 }
  y += 4

  const cardX = marginX
  const cardW = pageW - marginX * 2
  let cardY = y
  const innerPad = 20
  const innerX = cardX + innerPad
  let innerY = cardY + innerPad
  const innerW = cardW - innerPad * 2

  doc.setFillColor(11, 18, 32)
  doc.setDrawColor(31, 41, 55)
  doc.rect(cardX, cardY, cardW, 260 + Math.max(0, rows.length - 3) * 28, 'FD')

  const headerH = 36
  doc.setFillColor(51, 65, 85)
  doc.rect(innerX, innerY, innerW, headerH, 'F')
  doc.setFont('helvetica', 'bold')
  doc.setTextColor(248, 250, 252)
  const colN = (pos) => innerX + innerW * pos
  const C1 = (60 - 20) / 1040
  const C2 = (840 - 20) / 1040
  const thY = innerY + headerH - 12
  doc.text('Units', colN(C1), thY)
  doc.setTextColor(248, 250, 252)
  doc.text('Equivalent Grade', colN(C2), thY)

  innerY += headerH + 4
  const rowH = 26
  if (rows.length === 0) {
    doc.setTextColor(148, 163, 184)
    doc.text('No rows', innerX, innerY + 18)
    innerY += rowH
  } else {
    for (let i = 0; i < rows.length; i++) {
      const r = rows[i]
      const ry = innerY + i * rowH
      const fill = i % 2 === 0 ? { r: 17, g: 24, b: 39 } : { r: 15, g: 23, b: 42 }
      doc.setFillColor(fill.r, fill.g, fill.b)
      doc.rect(innerX, ry - 6, innerW, rowH, 'F')
      doc.setTextColor(229, 231, 235)
      const u = r.units === '' ? '—' : String(numberOr(r.units, 0))
      const eg = r.grade || ''
      doc.text(u, colN(C1), ry + 12)
      doc.setTextColor(229, 231, 235)
      doc.text(eg, colN(C2), ry + 12)
      if (ry + rowH > pageH - 80) { doc.addPage(); innerY = marginY; cardY = marginY; }
    }
    innerY += rows.length * rowH
  }

  y = innerY + 18

  doc.setFont('helvetica', 'bold')
  doc.setTextColor(248, 250, 252)
  doc.text(`Total Units: ${totalUnits}`, marginX, y)
  doc.text(`GWA: ${gwa.toFixed(2)}`, marginX + 240, y)
  doc.setFont('helvetica', 'normal')
  y += 30

  doc.setFontSize(9)
  doc.setTextColor(148, 163, 184)
  doc.text('Generated by GWA Calculator (data stayed on your device)', marginX, y)

  doc.save('GWA_Report.pdf')
}
